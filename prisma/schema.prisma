// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  TEACHER
  STUDENT
  ADMIN
}

model TeacherRequest {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  username String
  password String
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String   @unique
  password String
  type     UserType

  Otp           Otp[]
  MCQTest       MCQTest[]
  WrittenTest   WrittenTest[]
  MCQAnswer     MCQAnswer[]
  WrittenAnswer WrittenAnswer[]
  TypingTest    TypingTest[]
  TypeingAnswer TypeingAnswer[]
}

model AttendedTest {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userID String
  testID String
}

model MCQTest {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createrId String @db.ObjectId
  creater   User   @relation(fields: [createrId], references: [id])
  title     String
  subject   String

  questions MCQQuestion[]
  answers   MCQAnswer[]

  createdAt  DateTime @default(now())
  releaseAt  DateTime
  withholdAt DateTime
}

model WrittenTest {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  createrId String @map("userId") @db.ObjectId
  creater   User   @relation(fields: [createrId], references: [id])
  title     String
  subject   String

  questions WrittenQuenstion[]
  answers   WrittenAnswer[]

  createdAt  DateTime @default(now())
  releaseAt  DateTime
  withholdAt DateTime
}

model TypingTest {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  subject String

  createrId String @db.ObjectId
  creater   User   @relation(fields: [createrId], references: [id])

  questions     TypingQuestions[]
  TypeingAnswer TypeingAnswer[]

  createdAt  DateTime @default(now())
  releaseAt  DateTime
  withholdAt DateTime
}

model TypeingAnswer {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  answers String[]
  user    User       @relation(fields: [userId], references: [id])
  test    TypingTest @relation(fields: [testID], references: [id])
  testID  String     @db.ObjectId
  userId  String     @db.ObjectId
  checked Boolean    @default(false)
}

model WrittenAnswer {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  path          String      @unique
  WrittenTest   WrittenTest @relation(fields: [writtenTestId], references: [id])
  writtenTestId String      @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  checked Boolean @default(false)
}

model MCQAnswer {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  answers String[]
  checked Boolean  @default(false)

  testId String  @db.ObjectId
  test   MCQTest @relation(fields: [testId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model WrittenQuenstion {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  question String
  marks    Int
  testId   String      @db.ObjectId
  test     WrittenTest @relation(fields: [testId], references: [id])
}

model TypingQuestions {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  test     TypingTest? @relation(fields: [testID], references: [id])
  testID   String?     @db.ObjectId
  question String
  marks    Int
}

model MCQQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  marks         Int
  choices       String[]
  correctAnswer String

  MCQTest MCQTest @relation(fields: [testId], references: [id])
  testId  String  @db.ObjectId
}

model Otp {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])
  code   String
  userId String @db.ObjectId
}
